// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Model untuk Game
model Game {
  id            String         @id @default(cuid())
  name          String
  slug          String         @unique
  description   String?
  imageUrl      String?
  category      String
  isActive      Boolean        @default(true)
  isPopular     Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  denominations Denomination[]
  transactions  Transaction[]
  
  @@map("games")
}

// Model untuk Denominasi/Paket Top-Up
model Denomination {
  id          String        @id @default(cuid())
  name        String        // Contoh: "100 Diamond", "500 UC"
  amount      Int           // Jumlah item game (100, 500, dll)
  price       Float         // Harga dalam Rupiah
  isActive    Boolean       @default(true)
  gameId      String
  skuCode     String?       // Digiflazz SKU Code (ml75, ff50, etc)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relasi
  game         Game           @relation(fields: [gameId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  
  @@map("denominations")
}

// Model untuk Transaksi
model Transaction {
  id                 String            @id @default(cuid())
  gameUserId         String            // ID user di game (contoh: Player ID, UID)
  playerName         String?           // Nama player (opsional)
  status             TransactionStatus @default(PENDING)
  totalPrice         Float
  paymentMethod      String?           // Metode pembayaran yang dipilih
  digiflazzResponse  String?           @db.Text // Response dari Digiflazz API
  serialNumber       String?           // Serial Number dari Digiflazz
  paymentToken       String?           // Token pembayaran (Midtrans, etc)
  paymentResponse    String?           @db.Text // Response dari payment gateway
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  
  // Relasi
  gameId         String
  game           Game              @relation(fields: [gameId], references: [id])
  denominationId String
  denomination   Denomination      @relation(fields: [denominationId], references: [id])
  userId         String?           // Optional user relation
  user           User?             @relation(fields: [userId], references: [id])
  
  @@map("transactions")
}

// Model untuk User (NextAuth.js compatible)
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credentials login
  role          String    @default("user")
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // NextAuth.js relations
  accounts      Account[]
  sessions      Session[]
  
  // App relations
  transactions  Transaction[]
  
  @@map("users")
}

// NextAuth.js Account model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// NextAuth.js Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

// NextAuth.js VerificationToken model
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Model untuk Admin User (sederhana, tanpa auth eksternal)
model AdminUser {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String   // Akan di-hash
  role      String   @default("admin")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("admin_users")
}

// Enum untuk status transaksi
enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}
